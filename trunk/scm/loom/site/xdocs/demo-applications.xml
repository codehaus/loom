<?xml version="1.0" encoding="iso-8859-1"?>
<document>

    <properties>
        <title>Getting Started</title>
        <author email="leosimons@apache.org">Leo Simons</author>
        <author email="Paul_Hammant@yahoo.com">Paul Hammant</author>
        <author>Mauro Talevi</author>
    </properties>

    <body>

        <section name="Introduction">
            <p>
            This document aims to provides developers new to Loom with a few simple
            examples to help them getting started with Loom.
            </p>
            <p>
            Instructions for installing Loom can be found on the
                <a href="install.html">Install</a> document.
            </p>

        </section>
        <section name="Building the demos from source">
            <p>
            To build the demo
                <source>
cd loom
maven build:demos</source>
            </p>
            <p>
            The resulting artifacts are SAR files, one for each demo, in the distribution/deploy/demos
            directory. A SAR file is an archive
            for Loom applications which conveniently holds all the libraries and deployment
            information the the given application.  If you are familiar with J2EE EAR and WAR
            files you'll find it very similar.
            </p>
            <p>
            All is needed is for the SAR files to dropped in the <code>apps/</code> directory
            of the Loom distribution and to start/restart Loom by executing
            the preferred script in the <code>bin/</code> directory.
            </p>
        </section>

        <section name="The HelloWorld demo">

            <p>
            Loom would not be a serious application if it did not have an HellWorld demo!
             It will allow you to verify that you've successfully built Loom.
            </p>
 
            <p>
            Fire up Loom by executing the <code>run</code> script in the  <code>bin/</code> directory
            (this will execute in the foreground so you can see the messages
            written to System.out).
            </p>

            <p>
            Next point your favorite web browser to http://localhost:8999/,
            where localhost is the network name alias of your machine ("localhost").
            It should be recognised on all platforms. In the unlikely case it doesn't replace
            localhost with 127.0.0.1
            </p>
            <p>
            If all goes well, you will see something like the following:
                <source>
Hello World!
Requests so far = 1
you are 127.0.0.1 at 127.0.0.1</source>
            </p>
            <p>
            This shows that Loom has unpacked and launched the server application contained
            within the helloworld.sar file.
            To stop Loom simply use CTRL-C on the console window.  You can stop and start
            as many times as you need.  Once the SAR file has been unpacked in the apps/helloworld
            directory it will not attempt to unpack it again.
            So if you replace the helloworld.sar file with a new version, you must remove the
            unpacked directory for it to be redeployed.
            </p>
            <p>
            As examples go this is a fairly simple one.
            Further details can be found in the demo documentation, which is easily built:
                <source>
cd loom/demos/helloworld
maven xdoc</source>
            Then simply open
                <code>target/docs/index.html</code>.
            </p>
        </section>

        <section name="The distributed demo">
            <p>
        This demo application could be considered a starter project for someone wanting to make a
        Loom compatible application.  You can start with this skeleton which has several
        important features of real applications and then add in your core business logic.
            </p>
            <p>
        This demo application also demonstrates that it is possible to make a server application that is dual mode.
        Dual mode here is the ability for the server application to run inside Loom and to
        stand-alone from the command line.  The only difference is that the app
        needs to be zipped into two forms - the sar file for Loom and a jar file for standalone.
            </p>
            <p>
        The build artifacts produced by this demo are
                <ol>
                    <li>demos/distributed/server/target/demo-distributed-server.sar - the server app in Loom form</li>
                    <li>demos/distributed/server/target/demo-distributed-server-x.y.jar - the server app in standalone form</li>
                    <li>demos/distributed/client/target/demo-distributed-client-x.y.jar - the client app</li>
                </ol>
            </p>
            <p>
        To run the Server app inside Loom drop the
                <code>demo-distributed-server.sar</code> in the
        Loom distribution
                <code>apps</code> directory (as done above), and restart Loom:
                <source>
Server started on port 1234</source>
            </p>

            <p>
        To run the Server app in standalone mode:
                <source>
java -jar demo-distributed-server-x.y.jar
Loom Demo listening on port 7654
Ctrl-C to exit</source>
            </p>

            <p>
        Finally use the client application to poke the server :
                <source>
java -jar demo-distributed-client-x.y.jar localhost 7654 HelloLonerWorld
java -jar demo-distributed-client-x.y.jar localhost 1234 HelloLoomWorld</source>
        You should see the messages appear in the console windows in which the two servers are running.
            </p>
        </section>
    </body>
</document>
