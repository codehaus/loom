<?xml version="1.0" encoding="iso-8859-1"?>
<document>

    <properties>
        <title>Getting Started</title>
        <author email="jcontainer-interest@codehaus.org ">Loom Documentation Team</author>
        <author email="leosimons@apache.org">Leo Simons</author>
        <author email="Paul_Hammant@yahoo.com">Paul Hammant</author>
        <author>Mauro Talevi</author>
    </properties>

    <body>

        <section name="Introduction">
            <p>
		    This document aims to provides developers new to Loom with a few simple
		    examples to help them getting started with Loom.
            </p>
            <p>
		    Instructions for installing Loom can be found on the
                <a href="install.html">Install</a> document.
            </p>

        </section>

        <section name="The HelloWorld demo">

            <p>
		    Loom would not be a serious application if it did not have an HellWorld demo!
		    It will allow you to verify that you've successfully built Loom.
            </p>
            <p>
		    Firstly you will need to build the helloworld.sar file.  A SAR file is an archive
		    for Loom applications which conveniently holds all the libraries and deployment
		    information the the given application.  If you are familiar with J2EE EAR and WAR
		    files you'll find it very similar.
            </p>
            <p>
			To build the helloworld demo
                <source>
cd loom/demos/helloworld
maven
                </source>
			The resulting artifact will be found in the target/demo-helloworld.sar.
			Copy it into apps/ directory of the Loom distribution.
            </p>

            <p>
		    Then fire up Loom by simply executing the run script in the distribution bin/ directory:
                <source>
cd [distribution-dir]/bin
run[.bat|sh]
                </source>
            </p>

            <p>
		    Next point your favorite web browser to http://localhost:8999/,
		    where localhost is the network name alias of your machine ("localhost").
		    It should be recognised on all platforms. In the unlikely case it doesn't replace
		    localhost with 127.0.0.1
                <br/>
		    If all goes well, you will see something like the following:

                <source>
Hello World!
Requests so far = 1
you are 127.0.0.1 at 127.0.0.1
                </source>
            </p>
            <p>
		    This shows that Loom has unpacked and launched the server application contained
		    within the helloworld.sar file.
		    To stop Loom simply use CTRL-C on the console window.  You can stop and start
		    as many times as you need.  Once the SAR file has been unpacked in the apps/helloworld
		    directory it will not attempt to unpack it again.
		    So if you replace the helloworld.sar file with a new version, you must remove the
		    unpacked directory for it to be redeployed.
            </p>
            <p>
		    As examples go this is a fairly simple one.
			Further details can be found in the demo documentation, which is easily built:
                <source>
cd loom/demos/helloworld
maven xdoc
                </source>
			Then simply open
                <code>target/docs/index.html</code>.
            </p>
        </section>

        <section name="The Avalon Lifecycle demo">
            <p>The lifecycle demo shows only the calling of the Avalon lifecycle methods
		under Loom control.  If you are not familiar with the Avalon lifecycle, please
		refer to the
                <a href="http://avalon.apache.org/framework/reference-the-lifecycle.html">
		Avalon lifecycle</a> documentation.
            </p>
            <p>Do not forget that the lifecycle methods are optional.  You can implement
		all of them, as this demo does, some or none of them.</p>
            <p>
			To build the demo
                <source>
cd loom/demos/avalonlifecycle
maven
                </source>
			The resulting artifact will be found in the target/demo-avalonlifecycle.sar.
			Copy it into apps/ directory of the Loom distribution.
            </p>

            <p>This is the output that appears in the Console that Loom was started from:</p>
            <source>
Lifecycle1Impl.constructor() called. (You should never do too much in here)
Lifecycle1Impl.enableLogging() called.
Lifecycle1Impl.contextualize() called (things like base directory passed in here).
Lifecycle1Impl.service() called (lookup on other services possible now).
Lifecycle1Impl.configure() called (configuration from config.xml passed here).
Lifecycle1Impl.initialize() called.
Lifecycle1Impl.start() called.
Lifecycle2Impl.constructor() called. (You should never do too much in here)
Lifecycle2Impl.enableLogging() called.
Lifecycle2Impl.contextualize() called (things like base directory passed in here).
Lifecycle2Impl.service() called (lookup on other services possible now).
Lifecycle2Impl.service(), Lifecycle1 service looked up
Lifecycle2Impl.configure() called (configuration from config.xml passed here).
Lifecycle2Impl.initialize() called.
Lifecycle1Impl.myServiceMethod() called.
Lifecycle2Impl.initialize(), Lifecycle1.myServiceMethod() method called result = 123
Lifecycle2Impl.start() called.
(Ctrl-C pressed in console) JVM exiting abnormally. Shutting down Loom.
Lifecycle2Impl.stop() called.
Lifecycle2Impl.dispose() Called
Lifecycle1Impl.stop() called.
Lifecycle1Impl.dispose() Called
            </source>
        </section>

        <section name="The distributed demo">
            <p>
	    This demo application could be considered a starter project for someone wanting to make a
	    Loom compatible application.  You can start with this skeleton which has several
	    important features of real applications and then add in your core business logic.
            </p>
            <p>
	    This demo application also demonstrates that it is possible to make a server application that is dual mode.
	    Dual mode to us is the ability for the server application to run inside Loom and to
	    stand-alone from the command line.  The only difference is that the app
	    needs to be zipped into two forms - the sar file for Loom and a jar file for standalone.
            </p>
            <p>
	    To build the demo
            </p>
            <source>
cd loom/demos/distributed
maven
            </source>
            <p>
		The build setup also demostrates a typical build structure for multi-component project.
		The top-level
                <code>loom/demos/distributed/maven.xml</code> drives the build of the
		of the components via a reactor, which takes into consideration any dependencies among the
		components.
            </p>

            <p>
		The build artifacts are:
                <ol>
                    <li>server/target/demo-distributed-server.sar - the server app in Loom form</li>
                    <li>server/target/demo-distributed-server-x.y.jar - the server app in standalone form</li>
                    <li>client/target/demo-distributed-client-x.y.jar - the client app</li>
                </ol>
            </p>

            <p>
	    To run the Server app in standalone mode:
                <source>
java -jar demo-distributed-server-x.y.jar
Loom Demo listening on port 7654
Ctrl-C to exit
                </source>


	    To run the Server app inside Loom drop the
                <code>demo-distributed-server.sar</code> in the
	    Loom distribution
                <code>apps</code> directory (as done above), and restart Loom:
                <source>
Server started on port 1234
                </source>

	    Finally use the client application to poke the server :
                <source>
java -jar loom-demo-client.jar localhost 7654 HelloLonerWorld!!!
java -jar loom-demo-client.jar localhost 1234 HelloLoomWorld!!!
                </source>
		You should see the messages appear in the console windows in which the two servers are running.
            </p>
        </section>
    </body>
</document>
