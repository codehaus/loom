<?xml version="1.0" encoding="iso-8859-1"?>
<document>
  <properties>
    <title>Guide - Creating a Block</title>


  <author email="jcontainer-interest@codehaus.org ">Loom Documentation Team</author>
  </properties>
  <body>
    <section name="Introduction">
      <p>
        This document will describe the process for creating your first block. There
        are essentially three steps that must be completed before your block is ready
        for assembling.
      </p>
      <ol>
        <li>Write the Block component.</li>
        <li>Write the BlockInfo meta-info description file.</li>
        <li>Package the component and related resources into a block jar file.</li>
      </ol>
    </section>
    <section name="Writing the Block component">
      <p>
        Writing the Block is the main task you will be called to do. It follows all
        the rules of writing a standard Avalon component. If a block implements the
        Contextualizable interface it will be passed an instance of
        <source>org.apache.avalon.phoenix.BlockContext</source> which is an extended version
        of <source>org.apache.avalon.Context</source>. Other than this minor change the
        Block's container (the Phoenix Kernel) supports all the Avalon lifecycle
        methods or will in the near future (at the moment suspend/resume is not yet
        supported).
      </p>
      <p>
        The block can implement an interface if it wishes to export a service to external blocks. It is
        also possible to aquire services from other blocks in the <source>service()</source> method.
      </p>
    </section>
    <section name="Write the BlockInfo">
      <p>
        You must create this file to indicate which services this Block depends upon
        and those services which it offers. It is more fully documented in the
        <a href="../../reference/blockinfo-specification.html">BlockInfo Specification</a> document.
      </p>
    </section>
    <section name="Create the jar package">
      <p>
        The final step is packaging up the implementation files, BlockInfos and other
        resources into a jar file.
      </p>
    </section>
  </body>
</document>
