#Assembly Verifier
assembly.valid-names.notice=Verifying that the names specified for Component are valid.
assembly.unique-names.notice=Verifying that the names specified for the Components are unique.
assembly.dependencies-mapping.notice=Verifying that the dependency mapping is valid according to ComponentInfos.
assembly.dependency-references.notice=Verifying that the dependency mapping for every Component is valid with respect to other components.
assembly.nocircular-dependencies.notice=Verifying that there are no circular dependencies between Components.
assembly.component-type.notice=Verifying that the specified Components have valid types.
assembly.circular-dependency.error=Component named "{0}" has a circular dependency via path: {1}.
assembly.missing-dependency.error=Component "{1}" that satisfies the dependency with key "{0}" of Component "{2}" does not exist.
assembly.dependency-missing-service.error=Dependency "{0}" of Block "{2}" does not offer the required service "{1}".
assembly.bad-class.error=Unable to load class "{1}" for Component named "{0}". (Reason: {2}).
assembly.bad-name.error=The Component name "{0}" is invalid. Valid names contain only letters, digits and the '-' character.
assembly.duplicate-name.error=The name "{0}" is used by multiple Components in assembly.
assembly.unknown-dependency.error=Unknown dependency named "{0}" with key "{1}" declared for Component {2}.
assembly.unspecified-dependency.error=Dependency for key "{0}" not specified for the Component named "{1}".
error=Component named "{0}" of type "{1}" is not Contextualizable but declares Context Entrys.


unknown-dependency=Unknown dependency named "{0}" with role "{1}" declared for Block {2}.
unspecified-dependency=Dependency for role "{0}" not specified for the Block named "{1}".
duplicate-name=The name "{0}" is used by multiple Blocks and/or Listeners in assembly file.
bad-block-class=Unable to load class "{1}" for Block named "{0}". (Reason: {2}).
bad-service-class=Unable to load service class "{1}" for Block named "{0}". (Reason: {2}).
service-not-interface=Service class "{1}" specified for Block named "{0}" is not an interface.
block-noimpl-service=Service class "{2}" specified for Block named "{0}" is not implemented by Block class ({1}).
bad-listener-class=Unable to load BlockListener class "{1}" for BlockListener named "{0}". (Reason: {2}).
listener-noimpl-listener=BlockListener interface is not implemented by class "{1}" designated for BlockListener named "{0}".
dependency-noblock=Dependency "{0}" of Block "{1}" has not been specified.
dependency-noservice=Dependency "{0}" of Block "{2}" does not offer the service "{1}" required.
invalid-block-name=The Block name "{0}" is invalid. Valid names contain only letters, digits and the '-' & '.' characters.
invalid-listener-name=The Listener name "{0}" is invalid. Valid names contain only letters, digits and the '-' & '.' characters.
invalid-sar-name=The Sar name "{0}" is invalid. Valid names contain only letters, digits and the '-' & '.' characters.
dependency-circular=Block named "{0}" has a circular dependency via path: {1}.

verify-unique-names=Verifying that the name specified for Blocks and BlockListeners are unique.
verify-valid-names=Verifying that the name specified for Blocks and BlockListeners are valid.
verify-dependencies-mapping=Verifying that the specified Dependencies are valid according to BlockInfo.
verify-dependency-references=Verifying that the dependencies of Blocks are valid with respect to other Blocks.
verify-nocircular-dependencies=Verifying that there are no circular dependencies between Blocks.
verify-block-type=Verifying that the specified Blocks have valid types.
verify-listener-type=Verifying that the specified BlockListeners have valid types.

verifier.service-isa-lifecycle.error=The Block named "{0}" (implementation class "{1}"), implements a service "{2}" which extends a Lifecycle interface "{3}". This violates the expected usage patterns.
verifier.implements-block.error=The Block named "{0}" (implementation class "{1}"), implements Block interface. The Block interface has been deprecated and should no longer be used.

