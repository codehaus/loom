<?xml version="1.0" encoding="iso-8859-1"?>
<document>
  <properties>
    <title>A future</title>


  <author email="Paul_Hammant@yahoo.com">Paul Hammant</author>
  </properties>
  <body>
    <section name="Introduction">
      <p>
        A long term aim of Loom is to provide a platform that hosts multiple third party
          applications written only in Java within a single virtual machine.  The Loom
          platform is currently hosted on an Operating System such as Unix, Windows or Mac.
          It could function directly on top of a Java Operating System.  A CPU combined with
          a suitable amount of memory, a basic BIOS, a Kernal, a suitable JVM and runtime
          library, could mount Loom and hosted server applications.
      </p>
    </section>
    <section name="One step further">
      <p>
        Imagine Sun making such a box under their own name or as Cobalt, using low power chips from their own stable or perhaps a StrongARM. That machine could be rack mounted like their current X1:
      </p>
      <img src="http://www.sun.com/products-n-solutions/hw/networking/images/prodsplash/x1.jpg" alt="Sun X1"/>
      <p>
        If that rackable server had 32 such CPUs, each with 128Mb of memory all
        booting Loom. And if the CPUs shared a single hard drive, we might have
        a machine that was tuned to CPU intensive activities. Cocoon/Tomcat, EJB
        clusters, might be load balanced by one of the CPUs running a Loom load
        balancer.  Alternate scenarios are for virtual site hosting.  It could be
        a "1U" render or bean farm with each internal CPU having its own TCP/IP
        address.
      </p>
    </section>
    <section name="Is all this possible?">
      <p>
        Well there are already romable J2SE implementations that are available for
        StrongARM chips on Compaq's handheld iPAQ.  We are there already, but for
        the client side rather than the server side.
      </p>
    </section>
  </body>
</document>
